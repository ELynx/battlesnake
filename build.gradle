import org.apache.tools.ant.filters.TokenFilter

plugins {
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'application'
    id 'com.diffplug.spotless' version '5.14.3'
    id 'de.undercouch.download' version '4.1.2'
    id 'io.freefair.lombok' version '6.1.0'
    id 'jacoco'
}

group = 'ru.elynx'
version = '2.0.0'

java {
    sourceCompatibility = '11'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.javatuples:javatuples:1.2'

    implementation files("$buildDir/libs/newrelic-api.jar")

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
}

String newrelicStagingDir = "$buildDir/newrelicStaging"
String newrelicDestinationDir = "$buildDir/libs"
String newrelicJars = '**/newrelic*jar'
String newrelicYamls = '**/newrelic*yml'

task downloadNewrelic(type: Download) {
    mkdir newrelicStagingDir

    src 'https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip'
    dest new File(newrelicStagingDir + '/download', 'newrelic-java.zip')

    onlyIfModified true
}

task unzipNewrelic(type: Copy) {
    from (zipTree(downloadNewrelic.dest)) {
        include newrelicJars
        include newrelicYamls
    }
    into newrelicStagingDir + '/extracted'

    eachFile { fcp ->
        fcp.path = fcp.path.replaceFirst('newrelic', '')
    }

    includeEmptyDirs false
}

task copyNewrelicJars(type: Copy) {
    from (unzipNewrelic.destinationDir) {
        include newrelicJars
    }
    into newrelicDestinationDir
}

task copyNewrelicYmls(type: Copy) {
    from (unzipNewrelic.destinationDir) {
        include newrelicYamls
    }
    into newrelicDestinationDir

    String appName = System.getenv('HEROKU_APP_NAME')
    if (appName == null || appName.isEmpty()) {
        appName = rootProject.name
    }

    TokenFilter.ReplaceString replaceString = new TokenFilter.ReplaceString()
    replaceString.setFrom('My Application')
    replaceString.setTo(appName)

    filter(TokenFilter, add: replaceString)
}

task cleanNewrelic(type: Delete) {
    delete newrelicStagingDir
    delete fileTree(newrelicDestinationDir).matching {
        include newrelicJars
        include newrelicYamls
    }
}

tasks.unzipNewrelic.dependsOn downloadNewrelic
tasks.copyNewrelicJars.dependsOn unzipNewrelic
tasks.copyNewrelicYmls.dependsOn unzipNewrelic
tasks.build.dependsOn copyNewrelicJars
tasks.build.dependsOn copyNewrelicYmls

tasks.compileJava.dependsOn copyNewrelicJars
tasks.compileJava.dependsOn copyNewrelicYmls

tasks.clean.dependsOn cleanNewrelic

spotless {
    java {
        importOrder()
        removeUnusedImports()
        eclipse()
        indentWithSpaces(4)
    }
    groovyGradle() {
        greclipse()
        indentWithSpaces(4)
    }
}

application {
    mainClass.set('ru.elynx.battlesnake.BattlesnakeApplication')
}

test {
    useJUnitPlatform()
}

task testComponentOnly(type: Test) {
    useJUnitPlatform() {
        includeTags("TestComponent")
    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "ru/elynx/battlesnake/**/BattlesnakeApplication.class"
            ])
        }))
    }
}

var disabledTasks = [
    'bootStartScripts',
    'bootDistTar',
    'bootDistZip',
    'jar',
    'startScripts',
    'distTar',
    'distZip'
]

tasks.each {
    if (disabledTasks.contains(it.name)) {
        it.enabled = false
    }
}
