import org.apache.tools.ant.filters.TokenFilter

plugins {
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'application'
    id 'com.diffplug.spotless' version '5.15.0'
    id 'io.freefair.lombok' version '6.2.0'
    id 'jacoco'
}

group = 'ru.elynx'
version = '2.1.0'

java {
    sourceCompatibility = '11'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.javatuples:javatuples:1.2'

    compileOnly 'com.newrelic.agent.java:newrelic-api:7.2.0'

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'com.newrelic.agent.java:newrelic-api:7.2.0'

    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
}

String newrelicYamls = 'newrelic*yml'
String newrelicDestinationDir = "$buildDir/libs"

task copyNewrelicYmls(type: Copy) {
    group = 'build'

    from (rootDir) {
        include newrelicYamls
    }
    into newrelicDestinationDir

    String appName = System.getenv('HEROKU_APP_NAME')
    if (appName == null || appName.isEmpty()) {
        appName = rootProject.name
    }

    TokenFilter.ReplaceString replaceString = new TokenFilter.ReplaceString()
    replaceString.setFrom('APP_NAME_FROM')
    replaceString.setTo(appName)

    filter(TokenFilter, add: replaceString)
}

task cleanNewrelic(type: Delete) {
    group = 'build'

    delete fileTree(newrelicDestinationDir).matching {
        include newrelicYamls
    }
}

tasks.build.dependsOn copyNewrelicYmls
tasks.clean.dependsOn cleanNewrelic

spotless {
    java {
        importOrder()
        removeUnusedImports()
        eclipse()
        indentWithSpaces(4)
        endWithNewline()
    }
    groovyGradle() {
        greclipse()
        indentWithSpaces(4)
        endWithNewline()
    }
}

application {
    mainClass.set('ru.elynx.battlesnake.BattlesnakeApplication')
}

test {
    useJUnitPlatform()
}

task testComponentOnly(type: Test) {
    group = 'verification'

    useJUnitPlatform() {
        includeTags("TestComponent")
    }
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "ru/elynx/battlesnake/**/BattlesnakeApplication.class"
            ])
        }))
    }
}

task jacocoTestReportTest(type: JacocoReport) {
    group = 'verification'

    dependsOn test
    executionData test

    sourceSets sourceSets.test
}

task jacocoTestReportTestComponentOnly(type: JacocoReport) {
    group = 'verification'

    dependsOn testComponentOnly
    executionData testComponentOnly

    sourceSets sourceSets.test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, includes: [
                "ru/elynx/battlesnake/**/AsciiToGameState.class",
                "ru/elynx/battlesnake/**/SimplePredictorInformant.class",
                "ru/elynx/battlesnake/**/MySnake.class",
                "ru/elynx/battlesnake/**/MySnakeGameStrategyFactory.class"
            ])
        }))
    }
}

tasks.each {
    if (it instanceof JacocoReport) {
        it.reports {
            xml.required = false
            csv.required = false
            html.required = true
        }
    }
}

var disabledTasks = [
    'bootStartScripts',
    'bootDistTar',
    'bootDistZip',
    'jar',
    'startScripts',
    'distTar',
    'distZip'
]

tasks.each {
    if (disabledTasks.contains(it.name)) {
        it.enabled = false
    }
}
