plugins {
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'application'
    id 'com.diffplug.spotless' version '5.14.0'
    id 'de.undercouch.download' version '4.1.1'
    id 'io.freefair.lombok' version '6.0.0-m2'
}

group = 'ru.elynx'
version = '2.0.0'

java {
    sourceCompatibility = '11'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.javatuples:javatuples:1.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation files("$buildDir/libs/newrelic-api.jar")

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
}

task downloadNewrelic(type: Download) {
    mkdir 'newrelic-staging'

    src 'https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip'
    dest file('newrelic-staging')

    overwrite false
}

task unzipNewrelic(type: Copy) {
    from (zipTree(file('newrelic-staging/newrelic-java.zip'))) {
        include '**/newrelic*jar'
        include '**/newrelic*yml'
    }
    into "$buildDir/libs"

    eachFile { fcp ->
        fcp.path = fcp.path.replaceFirst('newrelic', '')
    }

    includeEmptyDirs false
}

task configureNewrelicAppName {
    doLast {
        String appName = System.getenv('HEROKU_APP_NAME')
        if (appName == null || appName.isEmpty()) {
            appName = rootProject.name
        }

        ant.replace(
                file: "$buildDir/libs/newrelic.yml",
                token: 'My Application',
                value: appName
                )
    }
}

task cleanNewrelic(type: Delete) {
    delete 'newrelic-staging'
}

tasks.unzipNewrelic.dependsOn downloadNewrelic
tasks.unzipNewrelic.finalizedBy configureNewrelicAppName
tasks.build.dependsOn unzipNewrelic
tasks.clean.dependsOn cleanNewrelic
tasks.compileJava.dependsOn unzipNewrelic

spotless {
    java {
        importOrder()
        removeUnusedImports()
        eclipse()
        indentWithSpaces(4)
    }
    groovyGradle() {
        greclipse()
        indentWithSpaces(4)
    }
}

application {
    mainClass.set('ru.elynx.battlesnake.BattlesnakeApplication')
}

test {
    useJUnitPlatform()
}

var disabledTasks = [
    'bootStartScripts',
    'bootDistTar',
    'bootDistZip',
    'jar',
    'startScripts',
    'distTar',
    'distZip'
]

tasks.each {
    if (disabledTasks.contains(it.name)) {
        it.enabled = false
    }
}
